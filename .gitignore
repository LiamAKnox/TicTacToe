
package TicTacToe;


import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.geom.Rectangle2D;

public class TTT_Canvas extends JPanel implements MouseListener, MouseMotionListener {
    int mouseX, mouseY;
    char[] filled = new char[9];
    boolean player_turn;
    Font font = new Font("Arial", Font.BOLD, 70);



    public TTT_Canvas() {
        this.addMouseMotionListener(this);
        this.addMouseListener(this);
    }

    @Override
    public void paintComponent(Graphics g) {
        Graphics2D g2D = (Graphics2D) g;
        super.paintComponent(g2D);
        g2D.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2D.setFont(this.font);

        while (true) {


            for (int tile = 0; tile < 9; ++tile) {
                //make the board look like an actual tic-tac-toe game!
                


                g2D.setColor(Color.LIGHT_GRAY);
                int x = (tile % 3) * 150;
                int y = (tile / 3) * 150;
                Rectangle2D.Double square = new Rectangle2D.Double(x, y, 150, 150);
                g2D.fill(square);
                
                


                if (this.filled[tile] != 0) {
                    g2D.setColor(Color.BLACK);
                    g2D.drawString(this.filled[tile] + "", x + 20, y + 20);
                } 
            }

            for (int i = 0; i < 3; ++i) {
                if (this.filled[i * 3] == this.filled[i * 3 + 1] && this.filled[i * 3] == this.filled[i * 3 + 2] && this.filled[i * 3] != 0) {
                    //print out current player as winner
                } else if (this.filled[i] == this.filled[i + 3] && this.filled[i] == this.filled[i + 6] && this.filled[i] != 0) {
                    //""""""
                } else if (this.filled[0] == this.filled[4] && this.filled[0] == this.filled[8] && this.filled[0] != 0) {
                    //""""""""""
                } else if (this.filled[2] == this.filled[4] && this.filled[2] == this.filled[6] && this.filled[2] != 0) {
                    //""""""""""""""
                }

            }




        }


    }


    @Override
    public void mouseMoved (MouseEvent arg0) {
        this.mouseX = arg0.getX();
        this.mouseY = arg0.getY();
    }

    @Override
    public void mousePressed (MouseEvent arg0) {
        //create after creating the design 
        //make it so that you find height and width  as opposed to an if for each tile
        int x = this.mouseX / 150;
        int y = this.mouseY / 150;
        if (this.filled[3 * y + x] != 0) {
            return;
        }

        if (x >= 0 && x < 3 && y >= 0 && y < 3) {
            if (this.player_turn == false) {//x player
                this.filled[3 * y + x] = 'X';
            } else {
                this.filled[3 * y + x] = 'O';
            }
        }
        this.player_turn = !this.player_turn;
        repaint();
    }











}
